{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","index.js"],"names":["FriendCard","props","className","alt","name","src","image","occupation","location","onClick","removeFriend","id","Wrapper","children","Title","App","state","friends","topscore","score","newfriends","map","friend","clicked","setState","newArray","sort","Math","random","this","key","Component","ReactDOM","render","document","getElementById"],"mappings":"g6FA+BeA,MA5Bf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QAEb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,SAEnC,yBAAKJ,UAAU,WAEb,4BACE,4BACE,yCADF,IAC0BD,EAAMG,MAEhC,4BACE,+CADF,IACgCH,EAAMM,YAEtC,4BACE,6CADF,IAC8BN,EAAMO,YAIxC,0BAAMC,QAAS,kBAAMR,EAAMS,aAAaT,EAAMU,KAAKT,UAAU,UAA7D,kB,MCjBSU,MAJf,SAAiBX,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMY,W,MCG1BC,MAJf,SAAeb,GACb,OAAO,wBAAIC,UAAU,YAAYD,EAAMY,W,OCiF1BE,E,2MA7EbC,MAAQ,CACNC,UACAC,SAAU,EACVC,MAAM,G,EAGRT,aAAe,SAAAC,GAEb,IAAMS,EAAa,EAAKJ,MAAMC,QAAQI,KAAI,SAAAC,GAqCxC,OApCGA,EAAOX,KAAOA,IAGXW,EAAOC,UAGN,EAAKP,MAAMG,OAAQ,EAAKH,MAAME,WAE/B,EAAKM,SAAS,CACZN,SAAU,EAAKF,MAAMG,MAAO,IAG7BG,EAAOC,SAAQ,GAGjB,EAAKC,SAAS,CACZL,MAAO,EAAKH,MAAMG,MAAQ,KAO5BG,EAAOC,UAER,EAAKC,SAAS,CACZL,MAAO,IAERG,EAAOC,SAAQ,IAQbD,KAGT,EAAKE,SAAS,CAAEP,QAAUG,IAE1B,IAAMK,EAAW,EAAKT,MAAMC,QAAQS,MAAK,kBAAKC,KAAKC,SAAS,MAC5D,EAAKJ,SAAS,CAAEP,QAAQQ,K,wEAIhB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,wBAAIvB,UAAY,SAAhB,gBACA,kBAAC,EAAD,eAAgB2B,KAAKb,MAAMG,MAA3B,IAAmC,IAAnC,eAAoDU,KAAKb,MAAME,SAA/D,KAECW,KAAKb,MAAMC,QAAQI,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACEZ,aAAc,EAAKA,aACnBC,GAAIW,EAAOX,GACXmB,IAAKR,EAAOX,GACZP,KAAMkB,EAAOlB,KACbE,MAAOgB,EAAOhB,MACdC,WAAYe,EAAOf,WACnBC,SAAUc,EAAOd,mB,GAvEXuB,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.997e8a17.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n    \n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n    \n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.location}\n          </li>\n        </ul>\n      </div>\n      <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n        ùòÖ\n      </span>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"subtitle\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    topscore: 0,\n    score:0\n  };\n\n  removeFriend = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const newfriends = this.state.friends.map(friend => {\n      if(friend.id === id)\n      {\n      \n        if(!friend.clicked)\n        {\n         \n          if(this.state.score>= this.state.topscore)\n          {\n            this.setState({\n              topscore: this.state.score +1\n             })\n\n             friend.clicked=true;\n          }\n\n           this.setState({\n             score: this.state.score + 1\n            })\n           \n        }\n\n\n\n        if(friend.clicked)\n        {\n          this.setState({\n            score: 0 \n           })\n           friend.clicked=false;\n        }\n\n       \n       \n       // alert(\"Match\"+friend.id+ \"\"+id)\n  \n      }\n      return friend\n      });\n    // Set this.state.friends equal to the new friends array\n    this.setState({ friends:  newfriends });\n\n    const newArray = this.state.friends.sort(()=> Math.random()-.5)\n    this.setState({ friends:newArray });\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <h1 className = \"title\">Friends List</h1>\n        <Title >Score: {this.state.score} {' '} High Score:{this.state.topscore} </Title>\n    \n        {this.state.friends.map(friend => (\n          <FriendCard\n            removeFriend={this.removeFriend}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}